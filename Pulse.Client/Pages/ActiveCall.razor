@page "/ActiveCall"
@using Pulse.Client.Calls
@using Pulse.Client.Audio
@inject CurrentCallAccessor CallAccessor
@inject Microphone Microphone
@inject Speaker Speaker

<MudText Typo="Typo.h2">@CurrentCall.OtherUser</MudText>
<MudAvatar Color="Color.Primary">@CurrentCall.OtherUser[0]</MudAvatar>

@if (!CurrentCall.Connection.IsCompleted)
{
    <p>Connecting...</p>
}

@if (error is not null)
{
    <p>@error</p>
}

@code {
    private Call CurrentCall => CallAccessor.CurrentCall!;
    private string? error;
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await using var audioStream = await CurrentCall.Connection;
            var microphoneRecording = new CancellationTokenSource();
            _ = Task.Run(() => Microphone.RecordAsync(audioStream, microphoneRecording.Token));
            await Speaker.PlayAsync(audioStream); // Assuming the stream will end at the end of the call
            microphoneRecording.Cancel();
        }
        catch (Exception e)
        {
            error = e.ToString();
        }
    }
}