@page "/ActiveCall"
@using Pulse.Client.Calls
@using Pulse.Client.Audio
@using Android.Media
@using Stream = System.IO.Stream
@using Android.Content
@inject CurrentCallAccessor CallAccessor
@inject Microphone Microphone
@inject Speaker Speaker
@inject NavigationManager NavigationManager

<MudPaper Class="pa-4 ma-4" Height="85vh">
    <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center">
        <MudAvatar Color="Color.Primary" Size="Size.Large">@CurrentCall.OtherUser[0].ToString().ToUpper()</MudAvatar>
        <MudText Typo="Typo.h2">@CurrentCall.OtherUser</MudText>
        @if (!CurrentCall.Connection.IsCompleted)
        {
            <p>Connecting...</p>
            <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
        }
        else if (CurrentCall.Connection.IsFaulted)
        {
            <MudAlert Severity="Severity.Error">Could not connect!</MudAlert>
        }
        else
        {
            <p>Connected!</p>
            <div class="d-flex justify-center" style="width: 100%">
                <div class="d-flex flex-wrap justify-center" style="width: 50%">
                    @foreach (var emoji in emojis)
                    {
                        <MudText Typo="Typo.h4" Style="text-align: center; flex: 25%" Class="mr-1 ml-1 pa-0">@emoji</MudText>
                    }
                </div>
            </div>
        }
        <MudToggleIconButton Icon="@Icons.Material.Outlined.Campaign"
                             Toggled="@speakerOn"
                             Size="Size.Large"
                             ToggledSize="Size.Large"
                             ToggledChanged="ToggleSpeaker"
                             Color="@Color.Primary" Title="Off"
                             ToggledIcon="@Icons.Material.Filled.Campaign"
                             ToggledColor="@Color.Primary"
                             ToggledTitle="On"/>

        <MudFab Icon="@Icons.Filled.CallEnd" Style="bottom: 0" Class="position-absolute mb-10" Color="Color.Error" OnClick="HangUpAsync"></MudFab>
    </MudStack>
</MudPaper>

@code {
    private Call CurrentCall => CallAccessor.CurrentCall!;
    private Stream? callAudioStream;
    private bool speakerOn;
    private string[] emojis = { };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await using var audioStream = (await CurrentCall.Connection).Stream;
            emojis = Emojis.GetEmojisForHash((await CurrentCall.Connection).EncryptedStreamCredentialsHash);

            StateHasChanged();

            callAudioStream = audioStream;
            var microphoneRecording = new CancellationTokenSource();
            _ = Task.Run(() => Microphone.RecordAsync(audioStream, microphoneRecording.Token));
            await Speaker.PlayAsync(audioStream); // Assuming the stream will end at the end of the call
            microphoneRecording.Cancel();
            Microphone.StopRecording();

            NavigationManager.NavigateTo("/");
        }
        catch
        {
            // ignored
        }
    }

    private async Task HangUpAsync()
    {
        if (callAudioStream != null)
            await callAudioStream.DisposeAsync(); // Will send hangup signal to the other user
    // todo: not working
    }

    private void ToggleSpeaker()
    {
        speakerOn = !speakerOn;
        var context = Android.App.Application.Context;
        var audioManager = (AudioManager)context.GetSystemService(Context.AudioService)!;
        audioManager.SpeakerphoneOn = speakerOn;
    }

}